ggplot(aes(x = Petal.Length)) +
geom_histogram(bins = 45)
prouni = readRDS("prouni.Rds")
prouni %>%
ggplot(aes(x = mensalidade, y = nota,
color = medicina, show.legend = FALSE)) +
geom_point()+
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")+
labs(col="Medicina")
prouni
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = medicina, show.legend = FALSE)) +
geom_point() +
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")+
labs(col="Medicina")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = Medicina, show.legend = FALSE)) +
geom_point() +
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")+
labs(col="Medicina")
prouni$Medicina = factor(prouni$Medicina)
saveRDS(prouni, "prouni.Rds")
prouni = readRDS("prouni.Rds")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = Medicina, show.legend = FALSE)) +
geom_point() +
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")+
labs(col="Medicina")
prouni$Medicina = ifelse(prouni$Medicina == 1, "Sim", "Não")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = Medicina, show.legend = FALSE)) +
geom_point() +
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")+
labs(col="Medicina")
saveRDS(prouni, "prouni.Rds")
prouni = readRDS("prouni.Rds")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = Medicina, show.legend = FALSE)) +
geom_point() +
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")+
labs(col="Medicina")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = Medicina, show.legend = FALSE)) +
geom_point() +
ggtitle("Relação entre nota de corte e mensalidade no ProUni")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = Medicina, show.legend = FALSE)) +
geom_point() +
xlab("Mensalidade do curso no ProUni") +
ylab("Nota de Corte do curso no ProUni") +
labs(title = "Relação entre nota de corte e mensalidade no ProUni",
col = "Medicina",
caption = "Fonte: Inep/MEC")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = Medicina, show.legend = FALSE)) +
geom_smooth() +
xlab("Mensalidade do curso no ProUni") +
ylab("Nota de Corte do curso no ProUni") +
labs(title = "Relação entre nota de corte e mensalidade no ProUni",
col = "Medicina",
caption = "Fonte: Inep/MEC")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla)) +
geom_smooth() +
xlab("Mensalidade do curso no ProUni") +
ylab("Nota de Corte do curso no ProUni") +
labs(title = "Relação entre nota de corte e mensalidade no ProUni",
caption = "Fonte: Inep/MEC")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla)) +
geom_smooth() +
xlab("Mensalidade do curso no ProUni") +
ylab("Nota de Corte do curso no ProUni") +
labs(title = "Relação entre nota de corte e mensalidade no ProUni",
caption = "Fonte: Inep/MEC")
prouni %>%
ggplot(aes(x = mensalidade, y = nota_integral_ampla,
color = Medicina, show.legend = FALSE)) +
geom_smooth() +
xlab("Mensalidade do curso no ProUni") +
ylab("Nota de Corte do curso no ProUni") +
labs(title = "Relação entre nota de corte e mensalidade no ProUni",
col = "Medicina",
caption = "Fonte: Inep/MEC")
Y = rnorm(1000)
set.seed(1234)
Y = rnorm(1000)
dados = data.frame(Y = rnorm(1000))
dados %>%
ggplot(aes(x = X)) +
geom_histogram()
dados
head(dados)
dados = data.frame(X = rnorm(1000))
dados %>%
ggplot(aes(x = X)) +
geom_histogram()
dados = data.frame(X = rnorm(3000))
dados %>%
ggplot(aes(x = X)) +
geom_histogram()
dados %>%
ggplot(aes(x = X)) +
geom_histogram(aes(y = ..density..))
dados %>%
ggplot(aes(x = X)) +
geom_histogram() +
stat_function(fun = dnorm)
dados %>%
ggplot(aes(x = X)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm)
dados %>%
ggplot(aes(x = X)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, size = 2)
dados %>%
ggplot(aes(x = X)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun = dnorm, size = 2)
dados %>%
ggplot(aes(x = X)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
stat_function(fun = dnorm, size = 2)
dados %>%
ggplot(aes(x = X)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun = dnorm, size = 2)
dados %>%
ggplot(aes(x = X)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, size = 2)
head(prouni)
prouni$uf_busca
mtcars
dados2 = data.frame(x = rt(3000, df = 5))
dados2 = data.frame(x = rexp(3000, rate = 5))
dados2 %>%
ggplot(aes(x = x)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = dexp, args = list(rate = 1))
dados2 %>%
ggplot(aes(x = x)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = dexp,
args = list(rate = 1),
size = 2)
dados2 %>%
ggplot(aes(x = x)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = dexp,
args = list(rate = 5),
size = 2)
setwd("C:/Users/Pichau/Desktop/petR/Aula 4 - Rodando Alguns Modelos")
install.packages("wooldridge")
dados = data.frame(explicada = Y,
explicativa = X)
set.seed(1234)
X = runif(n = 2000, min = 10, max = 20) # n = 2000 de uma variável aleatória X ~ U(10,20)
u = rnorm(n = 2000) # pertubações aleatórias com distribuição u ~ N(0,1)
Y = 5 + 0.8*X + u
dados = data.frame(explicada = Y,
explicativa = X)
set.seed(1234)
X = runif(n = 2000, min = 10, max = 20) # n = 2000 de uma variável aleatória X ~ U(10,20)
u = rnorm(n = 2000) # pertubações aleatórias com distribuição u ~ N(0,1)
Y = 5 + 0.8*X + u # criamos Y a partir de X e u
dados = data.frame(explicada = Y,
explicativa = X)
modelo1 = lm(Y ~ X, # fórmula do modelo a ser estimado
data = dados) # data.frame em que estão as variáveis
summary(modelo1) # visualizamos a tabela de regressão
set.seed(1234)
n = 3000 # tamanho da amostra
X = runif(n = n, min = 10, max = 20) # n = 2000 de uma variável aleatória X ~ U(10,20)
u = rnorm(n = n) # pertubações aleatórias com distribuição u ~ N(0,1)
Y = 5 + 0.8*X + u # criamos Y a partir de X e u
dados = data.frame(explicada = Y,
explicativa = X)
modelo1 = lm(Y ~ X, # fórmula do modelo a ser estimado
data = dados) # data.frame em que estão as variáveis
summary(modelo1) # visualizamos a tabela de regressão
n = 5000 # tamanho da amostra
X = runif(n = n, min = 10, max = 20) # n = 2000 de uma variável aleatória X ~ U(10,20)
u = rnorm(n = n) # pertubações aleatórias com distribuição u ~ N(0,1)
Y = 5 + 0.8*X + u # criamos Y a partir de X e u
dados = data.frame(explicada = Y,
explicativa = X)
modelo1 = lm(Y ~ X, # fórmula do modelo a ser estimado
data = dados) # data.frame em que estão as variáveis
summary(modelo1) # visualizamos a tabela de regressão
set.seed(1234)
n = 5000 # tamanho da amostra
X = runif(n = n, min = 10, max = 20) # n = 2000 de uma variável aleatória X ~ U(10,20)
u = rnorm(n = n) # pertubações aleatórias com distribuição u ~ N(0,1)
Y = 5 + 0.8*X  # criamos Y a partir de X e u
dados = data.frame(explicada = Y,
explicativa = X)
modelo1 = lm(Y ~ X, # fórmula do modelo a ser estimado
data = dados) # data.frame em que estão as variáveis
summary(modelo1) # visualizamos a tabela de regressão
set.seed(1234)
n = 5000 # tamanho da amostra
X = runif(n = n, min = 10, max = 20) # n = 2000 de uma variável aleatória X ~ U(10,20)
u = rnorm(n = n) # pertubações aleatórias com distribuição u ~ N(0,1)
Y = 5 + 0.8*X + u   # criamos Y a partir de X e u
dados = data.frame(explicada = Y,
explicativa = X)
modelo1 = lm(Y ~ X, # fórmula do modelo a ser estimado
data = dados) # data.frame em que estão as variáveis
summary(modelo1) # visualizamos a tabela de regressão
coef(modelo1)
coef(modelo1)$X
coef(modelo1)
class(coef(modelo1))
str(coef(modelo1))
coeficientes1 = coef(modelo1)
resid(modelo1)
residuos1 = resid(modelo1)
shapiro.test(residuos1)
summary(residuos1)
shapiro.test(residuos1) # realizamos teste de Shapiro-Wilk para normalidade
dados_residuos1  %>%
ggplot(aes(x = residuos)) +
geom_histogram()
library(dplyr)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
dados_residuos1 = data.frame(residuos = residuos1)
dados_residuos1  %>%
ggplot(aes(x = residuos)) +
geom_histogram()
var(residuos1)
dados_residuos1  %>%
ggplot(aes(x = residuos, y = ..density..)) +
geom_histogram() +
stat_function("dnorm", args = list(sd = sqrt(var(residuos))))
dados_residuos1  %>%
ggplot(aes(x = residuos,
y = ..density..)) + # y = ..density.. para termos densidade e não contagem
geom_histogram() +
stat_function(fun = "dnorm",
args = list(sd = sqrt(var(residuos))))
dados_residuos1  %>%
ggplot(aes(x = residuos) +
geom_histogram(aes(y = ..density..))) +  # y = ..density.. para termos densidade
stat_function(fun = "dnorm", # normal
args = list(sd = sqrt(var(residuos)))) # desvio-padrão igual ao dos resíduos
dados_residuos1  %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..))) +  # y = ..density.. para termos densidade
dados_residuos1  %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +  # y = ..density.. para termos densidade
stat_function(fun = "dnorm", # normal
args = list(sd = sqrt(var(residuos)))) # desvio-padrão igual ao dos resíduos
dados_residuos1  %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +  # y = ..density.. para termos densidade
stat_function(fun = "dnorm", # normal
args = list(sd = sqrt(var(residuos1)))) # desvio-padrão igual ao dos resíduos
dados_residuos1  %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +  # y = ..density.. para termos densidade
stat_function(fun = "dnorm", # normal
args = list(sd = sqrt(var(residuos1))), # desvio-padrão igual ao dos resíduos
size = 2)
coeficientes1
coeficientes1[2]
parametros = vector() # vetor vazio que será preenchido
m = 7500 # tamanho máximos de amostra
for(i in 1:m) {
X = runif(n = m, min = 10, max = 20) # n = 2000 de uma variável aleatória X ~ U(10,20)
u = rnorm(n = m) # pertubações aleatórias com distribuição u ~ N(0,1)
Y = 5 + 0.8*X + u   # criamos Y a partir de X e u
dados = data.frame(explicada = Y,
explicativa = X)
modelo = lm(Y ~ X, # fórmula do modelo a ser estimado
data = dados) # data.frame em que estão as variáveis
parametros[i] = coef(modelo)[2] # pegamos somente o parâmetro estimado para X
}
df_parametros %>%
ggplot(aes(x = Estimado)) +
geom_line()
df_parametros = data.frame(Estimado = parametros) #criamos um dataframe para o ggplot2
df_parametros %>%
ggplot(aes(x = Estimado)) +
geom_line()
df_parametros %>%
ggplot(aes(y = Estimado)) +
geom_line()
df_parametros = data.frame(Estimado = parametros
Amostra = 1:m) #criamos um dataframe para o ggplot2
df_parametros = data.frame(Estimado = parametros,
Amostra = 1:m) #criamos um dataframe para o ggplot2
df_parametros %>%
ggplot(aes(x = Amostra, y = Estimado)) +
geom_line()
df_parametros %>%
ggplot(aes(x = Amostra, y = Estimado)) +
geom_line +
ylab("Parâmetro Estimado") +
labs(title = "Consistência Assintótica do Estimador de Mínimos Quadrados",
subtitle = "Os parâmetros estimados são um aproximadamente normais com média no parâmetro verdadeiro")
df_parametros %>%
ggplot(aes(x = Amostra, y = Estimado)) +
geom_line() +
ylab("Parâmetro Estimado") +
labs(title = "Consistência Assintótica do Estimador de Mínimos Quadrados",
subtitle = "Os parâmetros estimados são um aproximadamente normais com média no parâmetro verdadeiro")
df_parametros %>%
ggplot(aes(x = Estimado)) +
geom_histogram(aes(y = ..density..))
df_parametros %>%
ggplot(aes(x = Estimado)) +
geom_histogram(aes(y = ..density..)) +
hline(.8)
df_parametros %>%
ggplot(aes(x = Estimado)) +
geom_histogram(aes(y = ..density..)) +
geom_vline(.8)
df_parametros %>%
ggplot(aes(x = Estimado)) +
geom_histogram(aes(y = ..density..)) +
geom_vline(xintercept = .8)
df_parametros %>%
ggplot(aes(x = Estimado)) +
geom_histogram(aes(y = ..density..)) +
geom_vline(xintercept = .8, # linha vertical no parâmetro verdadeiro
size = 2) +
labs(title = "Normalidade do estimador mínimos quadrados")
df_parametros %>%
ggplot(aes(x = Estimado)) +
geom_histogram(aes(y = ..density..)) +
geom_vline(xintercept = .8, # linha vertical no parâmetro verdadeiro
size = 2) +
ylab("") +
xlab("Parâmetro estimado") +
labs(title = "Normalidade do estimador mínimos quadrados")
summary(modelo2)
modelo2 = lm(log(Y) ~ log(X), # fórmula do modelo a ser estimado
data = dados) # data.frame em que estão as variáveis
summary(modelo2)
df_parametros %>%
ggplot(aes(x = Amostra, y = Estimado)) +
geom_line() +
ylab("Parâmetro Estimado") +
labs(title = "Consistência Assintótica do Estimador de Mínimos Quadrados",
subtitle = "Os parâmetros estimados são um aproximadamente normais com média no parâmetro verdadeiro")
parametros = vector() # vetor vazio que será preenchido
variancia_estimador = vector()
m = 10000 # tamanho máximos de amostra
for(i in 1:m) {
X = runif(n = m, min = 10, max = 20) # n = 2000 de uma variável aleatória X ~ U(10,20)
u = rnorm(n = m) # pertubações aleatórias com distribuição u ~ N(0,1)
Y = 5 + 0.8*X + u   # criamos Y a partir de X e u
dados = data.frame(explicada = Y,
explicativa = X)
modelo = lm(Y ~ X, # fórmula do modelo a ser estimado
data = dados) # data.frame em que estão as variáveis
parametros[i] = coef(modelo)[2] # pegamos somente o parâmetro estimado para X
variancia_estimador[i] = var(parametros)
}
df_parametros = data.frame(Estimado = parametros,
Amostra = 1:m) #criamos um dataframe para o ggplot2
df_variancia = data.frame(Variancia = Variancia_estimador,
amostra = 1:m)
df_variancia = data.frame(Variancia = Variancia_estimador,
amostra = 1:m)
df_variancia = data.frame(Variancia = variancia_estimador,
amostra = 1:m)
df_variancia %>%
ggplot(aes(x = amostra, y = Variancia)) +
geom_line()
df_variancia %>%
ggplot(aes(x = amostra, y = Variancia)) +
geom_line(size = 2)
data("AEJfigs")
library(AER)
install.packages("AER")
data("crimtab")
head(crimtab)
library(haven)
base = read_dta("http://masteringmetrics.com/wp-content/uploads/2015/01/AEJfigs.dta")
library(wooldridge)
data("wage2")
head(wage2)
summary(modelo_salarios)
modelo_salarios = lm(log(wage) ~ log(hours) + log(IQ) + log(educ) + log(educ)^2 + log(exper) + log(tenure) + south + urban + black + south*black,
data = wage2)
modelo_salarios = lm(log(wage) ~ log(hours) + log(IQ) + log(educ) + log(educ)^2 + log(exper) + log(tenure) + south + urban + black + south*black,
data = wage2)
modelo_salarios = lm(log(wage) ~ log(hours) + log(IQ) + log(educ) + log(exper) + log(tenure) + south + urban + black + south*black,
data = wage2)
View(wage2)
wage2$completo = complete.cases(wage2)
wage2 = wage2[wage2$completo == TRUE,]
modelo_salarios = lm(log(wage) ~ log(hours) + log(IQ) + log(educ) + log(exper) + log(tenure) + south + urban + black + south*black,
data = wage2)
modelo_salarios = lm(lwage ~ log(hours) + log(IQ) + log(educ) + log(exper) + log(tenure) + south + urban + black + south*black,
data = wage2)
modelo_salarios = lm(lwage ~ log(hours) + log(IQ) + log(educ) + log(exper) + log(tenure) + south + urban + black,
data = wage2)
modelo_salarios = lm(lwage ~ log(hours) + log(IQ) + log(educ) + log(exper) + tenure + south + urban + black,
data = wage2)
summary(modelo_salarios)
modelo_salarios = lm(lwage ~ log(hours) + log(IQ) + log(educ) + log(exper) + tenure + south + urban + black + south*black,
data = wage2)
summary(modelo_salarios)
modelo_salarios = lm(lwage ~ log(hours) + log(IQ) + log(educ) + log(exper) + tenure + south + urban + black,
data = wage2)
summary(modelo_salarios)
dados_residuos_salarios = data.frame(residuos = residuos_salarios)
summary(modelo_salarios)
residuos_salarios = resid(modelo_salarios)
dados_residuos_salarios = data.frame(residuos = residuos_salarios)
dados_residuos_salarios %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +  # y = ..density.. para termos densidade
stat_function(fun = "dnorm", # normal
args = list(sd = sqrt(var(residuos1))), # desvio-padrão igual ao dos resíduos
size = 2)
library(dplyr)
dados_residuos_salarios %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +  # y = ..density.. para termos densidade
stat_function(fun = "dnorm", # normal
args = list(sd = sqrt(var(residuos1))), # desvio-padrão igual ao dos resíduos
size = 2)
library(ggplot2)
dados_residuos_salarios %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +  # y = ..density.. para termos densidade
stat_function(fun = "dnorm", # normal
args = list(sd = sqrt(var(residuos1))), # desvio-padrão igual ao dos resíduos
size = 2)
dados_residuos_salarios %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +  # y = ..density.. para termos densidade
stat_function(fun = "dnorm", # normal
args = list(sd = sqrt(var(residuos_salarios))), # desvio-padrão igual ao dos resíduos
size = 2)
resid(modelo_salarios) %>% shapiro.test()
wage2$completo = complete.cases(wage2) # vetor dizendo se a observação é completa
wage2 = wage2[wage2$completo == TRUE,]
wage2$separador = runif(n = nrow(wage2), min = 0, max = 1)
treino = wage2[wage2$separador < .75]
treino = wage2[wage2$separador < .75,]
teste = wage2[wage2$separador >= .75,]
predict.lm(modelo_salarios, teste)
teste$previsao = predict.lm(modelo_salarios, teste)
teste$erro = teste$lwage - teste$previsao
summary(teste$erro)
teste %>%
ggplot(aes(x = erro)) +
geom_histogram()
teste %>%
ggplot(aes(x = erro)) +
geom_histogram(aes(y = ..density..))
head(base)
mortes = read_dta("http://masteringmetrics.com/wp-content/uploads/2015/01/AEJfigs.dta")
mortes$idade = base$agecell - 21
View(mortes)
library(rdrobust)
install.packages("rdrobust")
library(rdrobust)
rdplot(y = mortes$mva,
x = mortes$idade)
rdplot(y = mortes$mva,
x = mortes$idade,
ci = TRUE)
rdplot(y = mortes$mva,
x = mortes$idade,
shade = TRUE)
rdplot(y = mortes$mva,
x = mortes$idade,
x.label = "Diferença de idade para os 21 anos",
y.label = "Mortes por acidentes de veículos a cada 100 mil habitantes")
rdplot(y = mortes$mva,
x = mortes$idade,
x.label = "Diferença de idade para os 21 anos",
y.label = "Mortes por acidentes de veículos a cada 100 mil habitantes",
title = "Efeito de tratamento da idade legal para beber")
setwd("C:/Users/Pichau/Desktop/petR/Aula 5 - Atividade Prática Final")
h = "h"
class(h)
knitr::opts_chunk$set(echo = TRUE)
soma.minha = function(x,y){
if(!is.numeric(x) | !is.numeric(y)){
print("Você deve inserir dois números para que a função possa ser executada")
}else{
valor = x + y
return(valor)
}
}
soma.minha(2,"h")
